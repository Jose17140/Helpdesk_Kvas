@model HelpDesk_Kvas.Models.Datos.Entity.RequerimientoViewEntity
@{
    ViewBag.Title = "Nueva Tabla";
    //Layout = null;
}
@Styles.Render("~/Content/css/Grupos.css")
@Scripts.Render("~/bundles/jquery")
<script>
    $(document).ready(function () {
        $("#CiRif").autocomplete({
            dataType: 'JSON',
            source: function (request, response) {
                $.ajax({
                    url: "/Requerimiento/BuscarPersona",
                    type: "POST",
                    dataType: "json",
                    data: { _ci: request.term },
                    success: function (data) {
                        response($.map(data, function (item) {
                            return {
                                //label: item.Nombres, value: item.Nombres
                                id: item.id,
                                value: item.CiRif,
                                nombre: item.Nombres,
                                telefono: item.Telefonos,
                                direccion: item.Direccion,
                                email: item.Email
                            }
                        }))

                    }
                })
            },
            select: function (e, ui) {
                $("#Nombres").val(ui.item.nombre);
                $("#Telefonos").val(ui.item.telefono);
                $("#Direccion").val(ui.item.direccion);
                $("#Email").val(ui.item.email);
            }
        });
    })


</script>
<script type="text/javascript">
    $(document).ready(function () {
        //Dropdownlist Filtro
        $("#IdDepartamento").change(function () {
            $("#IdEquipo").empty();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("ObtenerEquipo")', // we are calling json method
                dataType: 'json',
                data: { _departamento: $("#IdDepartamento").val() },
                success: function (equipos) {
                    // states contains the JSON formatted list
                    // of states passed from the controller
                    $.each(equipos, function (i, data) {
                        $("#IdEquipo").append('<option value="' + data.Value + '">' + data.Text + '</option>');
                    }); // here we are adding option for States
                },
                error: function (ex) {
                    alert('Failed to retrieve states.' + ex);
                }
            });
            return false;
        })
    });
</script>
<script type="text/javascript">
    $(document).ready(function () {
        //Dropdownlist Filtro
        $("#IdEquipo").change(function () {
            $("#IdModelo").empty();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("ObtenerModelo")', // we are calling json method
                dataType: 'json',
                data: { _equipo: $("#IdEquipo").val() },
                success: function (modelos) {
                    // states contains the JSON formatted list
                    // of states passed from the controller
                    $.each(modelos, function (i, data) {
                        $("#IdModelo").append('<option value="' + data.Value + '">' + data.Text + '</option>');
                    }); // here we are adding option for States
                },
                error: function (ex) {
                    alert('Failed to retrieve states.' + ex);
                }
            });
            return false;
        })
    });
</script>
@*<script>
        $('#iddropdownlist').change(function () {
            var url = "/nombreControlador/BuscarCargoLider?claveLider=" + $('#iddropdownlist option:selected').val();
            $.ajax({
                url: url,
                type: 'GET',
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                async: true,
                success: function (result) {
                    var lider;
                    if (result != null && result.length > 0) {
                        lider = JSON.parse(result);
                    }
                    if (lider != null) {
                        $('#idinput').val(lider.cargo);//cargo debe ser la propiedad de la clase lider donde se almacena el cargo del lider
                    }
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert("error al consultar datos del lider");
                }
            });
        }
    </script>*@
<section class="content-header">
    <h1>
        Tablero
        <small>Requerimiento</small>
    </h1>
    <ol class="breadcrumb">
        <li><a href="#"><i class="fa fa-dashboard"></i> Inicio</a></li>
        <li class="active">Dashboard</li>
    </ol>
    <br />
    <div class="box box-default">
        <div class="box-header with-border">
            <h3 class="box-title">@ViewBag.MensajeInicio</h3>
        </div>
    </div>
</section>
<section class="content">
    @using (Html.BeginForm("Create", "Requerimiento", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post))
    {
        @Html.AntiForgeryToken()
        <input type="hidden" id="IdEmpleado" name="IdEmpleado" value="@ViewBag.IdUsuario" />
        <!--Datos Usuario-->
        <div class="box box-info">
            <div class="box-header with-border">
                <h3 class="box-title"><span class="glyphicon glyphicon-user"></span> Detalle del Cliente</h3>
                <div class="pull-right">
                    <a class="btn btn-success btn-sm" data-modal="" href="/Persona/Create" id="btnCreate">
                        <span class="glyphicon glyphicon-plus"></span> Agregar Cliente
                    </a>
                </div>
            </div>
            
            <div class="box-body">
                <div class="row">
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="exampleInputPassword1">Buscar Cedula:</label>
                            @Html.EditorFor(model => model.CiRif, new { htmlAttributes = new { @class = "form-control", @placeholder = "Buscar por cedula..." } })
                        </div>
                        @Html.ValidationMessageFor(model => model.CiRif, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="exampleInputPassword1">Nombres:</label>
                            @Html.EditorFor(model => model.Nombres, new { htmlAttributes = new { @class = "form-control", @Value = ViewBag.Cedula, disabled = "disabled" } })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="exampleInputPassword1">Teléfonos:</label>
                            @Html.EditorFor(model => model.Telefonos, new { htmlAttributes = new { @class = "form-control", @Value = ViewBag.Cedula, disabled = "disabled" } })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="exampleInputPassword1">Direccion:</label>
                            @Html.EditorFor(model => model.Direccion, new { htmlAttributes = new { @class = "form-control", @Value = ViewBag.Cedula, disabled = "disabled" } })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="exampleInputPassword1">Email:</label>
                            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @Value = ViewBag.Cedula, disabled = "disabled" } })
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!--Datos Orden-->
        <!-- Horizontal Form -->
        <div class="box box-info">
            <div class="box-header with-border">
                <h3 class="box-title"><span class="glyphicon glyphicon-file"></span> Detalle de la orden</h3>
            </div>
            <div class="box-body">
                <div class="row">
                    <div class="col-md-3">
                        <label>Departamento</label>
                        @Html.DropDownListFor(model => model.IdDepartamento, ViewBag.Departamentos as SelectList, "Seleccione Departamento", htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.IdDepartamento, "", new { @class = "text-danger" })
                    </div>
                    @*<div class="col-md-4">
                            <label>Fecha</label>
                            <input type="text" class="form-control datepicker" name="order_date" value="12/01/2018" disabled="">
                        </div>*@
                    <div class="col-md-2">
                        <label>Prioridad</label>
                        @Html.DropDownListFor(model => model.IdPrioridad, ViewBag.Prioridades as SelectList, "Seleccione Prioridad", htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.IdPrioridad, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <!-- /.box-body -->
        </div>
        <!--Datos Usuario-->
        <!-- general form elements disabled -->
        <div class="box box-warning">
            <div class="box-header with-border">
                <h3 class="box-title"><span class="fa fa-laptop"></span> Detalles del equipo</h3>
            </div>
            <!-- /.box-header -->
            <div class="box-body">
                <div class="row">
                    <div class="col-md-4">
                        <label>Equipo:</label>
                        @Html.DropDownList("IdEquipo", new SelectList(string.Empty, "Value", "Text"), "Seleccione Equipo", htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.IdEquipo, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-4">
                        <label>Modelo</label>
                        @Html.DropDownList("IdModelo", new SelectList(string.Empty, "Value", "Text"), "Seleccione Modelo", htmlAttributes: new { @class = "form-control" })

                        @*@Html.DropDownListFor(model => model.IdModelo, ViewBag.Modelos as SelectList, "Seleccione Modelo", htmlAttributes: new { @class = "form-control" })*@
                        @Html.ValidationMessageFor(model => model.IdModelo, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-4">
                        <label>Marca</label>
                        @*@Html.DropDownList("IdMarca", new SelectList(string.Empty, "Value", "Text"), "Seleccione Marca", htmlAttributes: new { @class = "form-control" })*@
                        @Html.DropDownListFor(model => model.IdMarca, ViewBag.Marcas as SelectList, "Seleccione Marca", htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.IdMarca, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-4">
                        <label>Número de serie</label>
                        @Html.EditorFor(m => m.Serial, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Serial, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-4">
                        <label>Accesorios</label>
                        @Html.EditorFor(m => m.Accesorio, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Accesorio, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <label>Problema del equipo</label>
                        @*<textarea class="form-control" name="Falla" id="Falla" rows="4" required="" data-rule-rangelength="5,255"></textarea>*@
                        @Html.EditorFor(m => m.Falla, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Falla, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-6">
                        <label>Observaciones</label>
                        @Html.EditorFor(m => m.Observaciones, new { htmlAttributes = new { @class = "form-control" } })
                        @*<textarea class="form-control" name="Observaciones" id="Observaciones" rows="4" data-rule-rangelength="5,255"></textarea>*@
                        @Html.ValidationMessageFor(model => model.Observaciones, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <!-- /.box-body -->

        </div>
        <!--/.col (right) -->
        <div class="box-footer">
            <div id="resultados_ajax" style="position:relative;"> </div>
            <button type="submit" class="btn btn-primary pull-right">Guardar datos</button>
        </div>

    }

</section>
<div id='myModal' class='modal fade in'>
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div id='myModalContent'></div>
        </div>
    </div>
</div>
<script src="~/Content/js/PruebaModal.js"></script>